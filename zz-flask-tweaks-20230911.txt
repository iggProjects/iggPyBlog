tweaks to flask parametrization

************************************************

config
  - https://hackersandslackers.com/configure-flask-applications/
  - https://flask.palletsprojects.com/en/2.3.x/config/


"""  
IN FLASK APP
Links
    LOGGING
    - https://docs.python.org/3/library/logging.html#logging-levels
    - https://docs.python.org/3/library/logging.html#logging.Formatter
    - https://docs.python.org/3/library/logging.html#logrecord-attributes

    EXCEPTION TYPES
    - https://docs.python.org/3/library/exceptions.html
    - https://www.tutorialspoint.com/How-to-print-the-Python-Exception-Error-Hierarchy

    - https://flask.palletsprojects.com/en/2.3.x/errorhandling/
    - https://stackoverflow.com/questions/25919517/python-flask-redirect-with-error
    - https://www.digitalocean.com/community/tutorials/how-to-handle-errors-in-a-flask-application
    - https://flask.palletsprojects.com/en/2.3.x/errorhandling/
    - https://www.youtube.com/watch?v=r3Xmcdlx-Us
    - args & kwargs --> https://www.geeksforgeeks.org/args-kwargs-python/

        More params to FORMAT
            FORMAT = '%(asctime)s %(clientip)-15s %(user)-8s %(message)s'
            logging.basicConfig(format=FORMAT)
            d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
            logging.warning('Protocol problem: %s', 'connection reset', extra=d)

""" 

from flask import Flask, render_template, url_for, redirect, request, session
# LoginManager

from article_data import Articles
from excercise_data import Excercises
from LifeGame_data import LG_scripts
from EnigmaGame_data import Enigma_scripts

from flask_sqlalchemy import *
import os
import platform
import sys

# handling data and time var's
import datetime

#from MyColors import *
from MyFunc import *
# error handling
import traceback
import logging
logging.basicConfig(filename='server_messages.log', 
                    encoding='utf-8', level=logging.DEBUG, format="%(asctime)-15s %(levelname)-8s %(funcName)s %(message)s")
logging.captureWarnings(True)
#logging.captureWarnings(False)


# COLOR CONTANTS
"""
NO_COLOR = "\033[00m"
FR_RED   = "\033[91m"
FR_GREEN = "\033[92m"
FR_YELL  = "\033[93m"
FR_BLUE  = "\033[94m"
FR_MAG   = "\033[95m"
"""

app = Flask(__name__)
app.secret_key = 'HI TARZAN'

basedir = os.path.abspath(os.path.dirname(__file__))
print(f"{FR_GREEN}............ basedir ===> {os.path.abspath(os.path.dirname(__file__))}{NO_COLOR}")

opSys = platform.system()
print(f"{FR_YELL}............ OS ===> {opSys}{NO_COLOR}")

app.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:///' + os.path.join(basedir, 'foods.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Plato(db.Model):
    id         = db.Column(db.Integer, primary_key=True)
    tipo       = db.Column(db.String(10), nullable=False)
    nombre     = db.Column(db.String(30), nullable=False)
    precio     = db.Column(db.Float, nullable=False)
    disp       = db.Column(db.Integer, nullable=False, default=1)    

with app.app_context():
    db.create_all()


#app.config['UPLOAD_FOLDER'] = 'img' 

Articles = Articles()
Excercises = Excercises()
LG_scripts = LG_scripts()
Enigma_scripts = Enigma_scripts()


